import { UsersService } from 'src/users/users.service';
import { RightsService } from 'src/users/rights.service';
import { CreateUserDto } from 'src/users/dto/create-user.dto';
import { User } from 'src/users/models/user.entity';
import { GetUsersFilterDto } from 'src/users/dto/get-users-filter.dto';
import { UpdateUserDto } from 'src/users/dto/update-user.dto';
import { UpdateUsersDto } from 'src/users/dto/update-users.dto';
import { Rights } from 'src/users/models/rights.entity';
import { SetUserRightsDto } from 'src/users/dto/set-user-rights.dto';
import { CreateRightsDto } from 'src/users/dto/create-rights.dto';
import { AssetsService } from 'src/assets/assets.service';
import { AuthCredentialsDto } from '../auth/dto/auth-credentials.dto';
import { UserOutDto } from '../users/dto/out/User.out.dto';
import { WsGateway } from '../websocket/ws.gateway';
export declare class UsersFacade {
    private usersService;
    private rightsService;
    private assetsService;
    private wsGateway;
    constructor(usersService: UsersService, rightsService: RightsService, assetsService: AssetsService, wsGateway: WsGateway);
    createUser(createUserDto: CreateUserDto, user: User): Promise<User>;
    getUsers(getUsersFilterDto: GetUsersFilterDto, user: User): Promise<UserOutDto[]>;
    getReachableUsers(user: User): Promise<User[]>;
    getReachableUsersMap(user: User): Promise<Map<number, User>>;
    getUserById(id: number): Promise<User>;
    updateUser(id: number, updateUserDto: UpdateUserDto, user: User): Promise<User>;
    updateUsersUnits(updateUsersDto: UpdateUsersDto, user: User): Promise<User>[] | any;
    deleteUser(id: number, user: User): Promise<void>;
    setUsersRights(userId: number, setUserRightsDto: SetUserRightsDto, user: User): Promise<Rights[]>;
    getRights(): Promise<Rights[]>;
    createRights(createRightsDto: CreateRightsDto): Promise<Rights>;
    validateUser(authCredentialsDto: AuthCredentialsDto): Promise<User>;
}
